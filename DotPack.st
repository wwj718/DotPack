BorderedMorph subclass: #DotPack	instanceVariableNames: 'cells withDevice deviceAddress messageType'	classVariableNames: ''	poolDictionaries: ''	category: 'DotPack'!!DotPack commentStamp: 'wwj718 8/21/2022 20:01' prior: 0!I am a DotPack simulator.|pack|pack := DotPack new.pack stopStepping."clear"pack clear."hello world"pack x:1 y:1 color: Color red."set background color"pack backgroundColor: Color blue."use Inspector to explore it!!"pack inspect."run Snow Crash for 2 seconds"[	pack startStepping. 	2 seconds wait.	pack stopStepping.] fork.!!DotPack methodsFor: 'drawing' stamp: 'wwj718 8/21/2022 11:14'!backgroundColor: aColorcells do: [:each | each color: aColor]! !!DotPack methodsFor: 'drawing' stamp: 'wwj718 9/3/2022 18:18'!clear|message|self backgroundColor: Color black."cells do: [:each| each turnOff.]"message := 'clear'.self sendMessageToMicroBlocks: message.! !!DotPack methodsFor: 'drawing' stamp: 'wwj718 9/3/2022 18:18'!x: xCoord y: yCoord color: aColor 	|message colorString|	(cells at: xCoord at: yCoord) color: aColor.	"to send message"	colorString :=  self toMicroBlocksColor: aColor.	message := 'setpixel,{1},{2},{3}' format: {xCoord. yCoord. colorString}.	self sendMessageToMicroBlocks: message.! !!DotPack methodsFor: 'demo' stamp: 'wwj718 8/21/2022 14:09'!randomEachcells do: [:each| each color: Color random]! !!DotPack methodsFor: 'demo' stamp: 'wwj718 8/21/2022 11:57'!snowCrashcells do: [:each| 2 random =1 ifTrue:[each color:Color white] ifFalse:[each color:Color black]]! !!DotPack methodsFor: 'initialization' stamp: 'wwj718 8/21/2022 08:41'!cellsPerSide	"The number of cells along each side of the DotPack"	^ 16! !!DotPack methodsFor: 'initialization' stamp: 'wwj718 9/5/2022 12:35'!initialize| backgroundImage height overallBorderWidth sampleCell width |super initialize.withDevice := false.deviceAddress := #[192 168 1 8].messageType := 'HTTP'.sampleCell := DotPackCell new.width := sampleCell width.height := sampleCell height.overallBorderWidth := 2 * self borderWidth.self position: 140 @ 268.self extent: (width * self cellsPerSide) @ (height * self cellsPerSide) + overallBorderWidth.cells := Matrix new: self cellsPerSide tabulate: [:i :j | self newCellAt: i at: j]."background image""backgroundImage :=  ImageMorph new image: (Form fromFileNamed: 'dotpack-removebg.png').""(Form fromFileNamed: 'dotpack-removebg.png' ) asMorph."backgroundImage := self getBackGroundImage.backgroundImage position: 100 @ 100.backgroundImage addMorph: self.backgroundImage openInWorld.! !!DotPack methodsFor: 'initialization' stamp: 'wwj718 8/21/2022 09:09'!newCellAt: i at: j 	"Create a cell for position (i,j) and add it to my on-screen	representation at the appropriate screen position.  Answer the new cell"	| c origin |	c := DotPackCell new.	origin := self innerBounds origin.	self addMorph: c.	c position: ((i - 1) * c width) @ ((j - 1) * c height) + origin.	^ c! !!DotPack methodsFor: 'accessing' stamp: 'wwj718 8/21/2022 15:04'!indexOf: anElement^ cells indexOf: anElement! !!DotPack methodsFor: 'accessing' stamp: 'wwj718 9/3/2022 18:51'!messageType^ messageType! !!DotPack methodsFor: 'accessing' stamp: 'wwj718 8/31/2022 18:46'!withDevice^ withDevice! !!DotPack methodsFor: 'accessing' stamp: 'wwj718 8/21/2022 11:05'!x: xCoord y: yCoord^ cells at: xCoord at: yCoord.! !!DotPack methodsFor: 'converting' stamp: 'wwj718 8/31/2022 21:50'!toMicroBlocksColor: aColor|r g b|r := (aColor red * 255) asInteger .g := (aColor green * 255) asInteger .b := (aColor blue * 255) asInteger .^ (r << 16 bitOr:  g << 8) bitOr: b.! !!DotPack methodsFor: 'stepping and presenter' stamp: 'wwj718 8/21/2022 11:58'!stepself snowCrash! !!DotPack methodsFor: 'stepping and presenter' stamp: 'wwj718 8/21/2022 11:59'!stepTime^ 100! !!DotPack methodsFor: 'as yet unclassified' stamp: 'wwj718 9/5/2022 12:34'!getBackGroundImage| form url |        url := 'https://wwj718.github.io/post/img/dotpack-removebg.png'.        form := Form fromBinaryStream: (WebClient httpGet: url) content asByteArray readStream.       ^ form asMorph! !!DotPack methodsFor: 'as yet unclassified' stamp: 'wwj718 9/3/2022 18:34'!sendMessageToMicroBlocks: aMessage 	"install CommandShell"	| command addressString clientSocket|	withDevice		ifTrue: [messageType = 'HTTP'				  ifTrue: [addressString := 'http://{1}' format: {deviceAddress joinSeparatedBy: '.'}.					command := 'curl -X POST -H ''Content-Type: text/plain'' --data ''{1}'' {2}' format: {aMessage. addressString}.					(CommandShell new pipeline: command) output].				messageType = 'UDP'					 ifTrue: [						clientSocket := Socket newUDP.						clientSocket 							sendData: aMessage							toHost: deviceAddress							port: 5000						].					0.01 seconds wait.				].	Transcript show: aMessage asString;		 cr! !!DotPack methodsFor: 'as yet unclassified' stamp: 'wwj718 9/3/2022 18:20'!sendMessageWith: aMessageType"messageType: 	HTTP	UDP"messageType := aMessageType.! !!DotPack methodsFor: 'as yet unclassified' stamp: 'wwj718 9/3/2022 17:30'!withDevice: aBoolean		withDevice := aBoolean.! !!DotPack methodsFor: 'as yet unclassified' stamp: 'wwj718 9/3/2022 17:27'!withDevice: aBoolean deviceAddress: aAddress		withDevice := aBoolean.	deviceAddress :=  aAddress.! !!DotPack methodsFor: 'menus' stamp: 'wwj718 8/31/2022 18:57'!addCustomMenuItems: aCustomMenu hand: aHandMorph super addCustomMenuItems: aCustomMenu hand: aHandMorph. aCustomMenu add: 'clear' action: #clear.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DotPack class	instanceVariableNames: 'messageType'!Morph subclass: #DotPackCell	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'DotPack'!!DotPackCell methodsFor: 'initialization' stamp: 'wwj718 8/21/2022 13:58'!initializesuper initialize. self	borderWidth: 1;	borderColor: Color black;	bounds: (0 @ 0 corner: 20.5 @ 20.5).! !!DotPackCell methodsFor: 'accessing' stamp: 'wwj718 8/31/2022 21:49'!getxy^ self owner indexOf: self.! !!DotPackCell methodsFor: 'event handling' stamp: 'wwj718 8/21/2022 14:06'!handlesMouseDown: evt		^ true.! !!DotPackCell methodsFor: 'event handling' stamp: 'wwj718 8/21/2022 14:20'!handlesMouseOver: evt
^ true! !!DotPackCell methodsFor: 'event handling' stamp: 'wwj718 8/31/2022 21:57'!mouseDown: anEvent 	"Transcript show:	anEvent. "	| color xy |	color := Color random.	xy := self getxy.	self color: Color random.	self owner x: xy x y:xy y color: self color.! !!DotPackCell methodsFor: 'event handling' stamp: 'wwj718 9/3/2022 18:56'!mouseEnter: evt 	| message colorString|	"Transcript show: evt; cr."	self assuredPlayer		sayText: (self getxy asString copyReplaceAll: '@' with: ',').		colorString := self owner toMicroBlocksColor: Color blue.	self owner messageType = 'UDP'		ifTrue: [message := 'setpixel,{1},{2},{3}' format: {self getxy x. self getxy y. colorString}.			self owner sendMessageToMicroBlocks: message]! !!DotPackCell methodsFor: 'event handling' stamp: 'wwj718 9/3/2022 18:56'!mouseLeave: evt 	| message colorString |	Transcript show: evt; cr.	self assuredPlayer sayText: ''.	colorString := self owner toMicroBlocksColor: Color black.	self owner messageType = 'UDP'		ifTrue: [message := 'setpixel,{1},{2},{3}' format: {self getxy x. self getxy y. colorString}.			self owner sendMessageToMicroBlocks: message]! !TestCase subclass: #DotPackTest	instanceVariableNames: 'pack'	classVariableNames: ''	poolDictionaries: ''	category: 'DotPack'!!DotPackTest methodsFor: 'as yet unclassified' stamp: 'wwj718 8/21/2022 19:41'!setUp	pack := DotPack new.! !!DotPackTest methodsFor: 'as yet unclassified' stamp: 'wwj718 8/21/2022 19:43'!tearDown	pack owner delete.! !!DotPackTest methodsFor: 'as yet unclassified' stamp: 'wwj718 8/21/2022 19:45'!testNoError	self assert: (1=1).	self shouldnt: [pack] raise: Error.! !